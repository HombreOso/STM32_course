//nucleo-f446ze

// Where is the LED connected?
// Port:	B
// Pin:		7
// page 24 User Guide

#include <stdint.h>

#define PERIPH_BASE			(0x40000000UL)  /*page 69 Data sheet*/

#define AHB1_PERIPH_OFFSET 	(0x00020000UL) /*page 67 Data sheet*/
#define AHB1_PERIPH_BASE 	(PERIPH_BASE + AHB1_PERIPH_OFFSET)

#define GPIOB_OFFSET		(0x0400U) /*page 67 Data sheet*/
#define GPIOB_BASE			(AHB1_PERIPH_BASE + GPIOB_OFFSET)

#define RCC_OFFSET			(0x3800UL) /*page 67 Data sheet*/
#define RCC_BASE			(AHB1_PERIPH_BASE + RCC_OFFSET)

#define AHB1EN_R_OFFSET		(0x30UL) /*page 144 Reference Manual*/
#define RCC_AHB1ENR		(*(volatile unsigned int *)(RCC_BASE + AHB1EN_R_OFFSET))

#define GPIOBEN				(1U<<1) /*page 145 Reference Manual*/

#define MODE_R_OFFSET		(0x00UL) /*page 187 Reference Manual, mode register*/
#define GPIOB_MODER		(*(volatile unsigned int *)(GPIOB_BASE + MODE_R_OFFSET))

#define ODR_OFFSET			(0x14UL) /*page 190 Reference Manual*/
#define GPIOB_ODR			(*(volatile unsigned int *)(GPIOB_BASE + ODR_OFFSET))

#define PIN7				(1U<<7) /*page 190 Reference Manual*/
#define BLUE_LED_PIN		PIN7


typedef struct
{
	volatile uint32_t MODER; /*GPIO port mode register, offset 0x00*/
	volatile uint32_t DUMMY[4]; /*Dummy member of the struct*/
	volatile uint32_t ODR; /*GPIO port output data register, offset 0x14*/
}GPIO_TypeDef;

typedef struct
{
	volatile uint32_t DUMMY[12]; /*Dummy member of the struct*/
	volatile uint32_t AHB1ENR; /*RCC AHB1 peripheral clock register, offset 0x30*/
}RCC_TypeDef;


#define RCC 			((RCC_TypeDef *) RCC_BASE)
#define GPIOB 			((GPIO_TypeDef *) GPIOB_BASE)

int main(void)
{
	/*1. Enable clock access to GPIOA*/
	//RCC_AHB1ENR |= GPIOBEN;
	RCC -> AHB1ENR |= GPIOBEN;

	/*2. Set PB7 as output pin*/
	GPIOB_MODER |= (1U<<14);
	GPIOB_MODER &= ~(1U<<15);

	// infinite loop
	while(1)
	{
		/*3. Set PB7 high*/
		//GPIOB_ODR |= BLUE_LED_PIN;

		/*4. Experiment 2: toggle PB7*/
		GPIOB_ODR ^= BLUE_LED_PIN;

		//delay
		for(int i=0; i<10000000; i++){}
	}
}
